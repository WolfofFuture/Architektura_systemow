Typy danych:
  typy tablicowe -- atrybuty tablic
    signal moj_wektor : std_logic_vector (5 downto -5),
  Wyrażenie zawierające atrybut:        Wartość:
    moj_wektor'left                        5
    moj_wektor'right                      -5
    moj_wektor'high                        5
    moj_wektor'low                        -5
    moj_wektor'length                      11
    moj_wektor'range                   (5 downto -5)
    moj_wektor'reverse_range             (-5 to 5)

Atrybuty dotyczące sygnałów
  atrybut 'event -- zwraca TRUE, gdy w danym kroku symulacji nastąpiła zmiana wartości danego sygnału:
    process (RST, CLK)
    begin
        if RST = '1' then
            Q <= '0';
        elsif CLK'event and CLK = '1' then
            -- wykrywanie dodatniego
            Q <= D;
        end if;
    end process;
Atrybuty dotyczące sygnałów:
  atrybut 'active (TYLKO NA SYMULACJI) - zwraca TRUE, gdy w danym kroku symulacji nastąpiło zaplanowanie jakiejś operacji 
  dla danego sygnału:

  atrybut 'last_event - (POZWALA PRZEPROWADZIĆ SYMULACJĘ), zwraca czas, jaki upłynął od czasu ostatniej zmiany sygnału:
      process
          variable T : time;
      begin
          Q <= D after 10 ns;
          wait for 15 ns;
          T := Q'last_event; -- T = 5ns
            ......
      end process;

  'active, 'last_event,'last_value i 'last_active powinny być używane TYLKO DO SYMULACJI I TESTOWANIA UKŁADU - np. do
  sprawdzania czasów ustalania się sygnałów (setup time, hold time)

Atrybuty konwersji pomiędzy smienną i łańcuchem
  atrybut <nazwa_typu>'image(<wyrażenie>)
    -zwraca łańcuch string reprezentujący wyrażenie <wyrażenie>, które musi być typu <nazwa_typu>. Typ <nazwa_typu> musi być typem skalarnym.
    variable X :integer;
    ...
    assert (ERROR = FALSE)
      report "Błąd symulacji, wartość X=" &
      integer'image (X);
  atrybut <nazwa_typu>'value(<łańcuch>) -
    -zamienia łańcuch <łańcuch> na wartość typu <nazwa_typu>:
        next_state <= STATE'value(text_line);
          -- zmienna text_line jest typu string
          -- zmienna next_state jest typu STATE
  atrybut <sygnał>'delayed(<czas>)
    - tworzy nowy sygnał, ientyczny jak sygnał <sygnał>, ale opóźniony o czas <czas>
      process <clk'delayed(hold)>; --- W IMPLEMENTACJI ABY OPÓŹNIĆ MOŻNA SKORZYSTAĆ Z LICZNIKA
  atrybut <sygnał>'stable WYKORZYSTYWANE JEST W SYMULACJI

  atrybut <sygnał>'quiet(<czas>) - tworzy nowy sygnał typu boolean, (TRUE, gdy dla <sygnał> nie zaplanowano operacji <czas>)
    process
      variable A: boolean;
    begin
      Q <= D after 30 ns;
      wait for 10 ns;
      A := Q'quiet(20 ns); -- A = FALSE, nastąpiło zaplanowanie przypisania 10ns wcześniej
      wait for 40 ns;
      A := Q'quiet(20 ns); -- A = TRUE, ostatnie zdarzenie nastąpiło 20 ns wcześniej
    ....
    end process
MOŻLIWE JEST ZWIĘKSZENIE ILOŚCI PAMIĘCI W DYSKU HDD PRZEPROGRAMOWUJĄC GO


SYMULACJA I TESTOWANIE:

  Sygnały pobudzające 
      Przypisanie wartości początkowych:
          signal clk : std_logic:='1';
          signal vec : std_logic_vector(7 downto 0) := "00000000";
                NIE JEST ZAWSZE SYNTEZOWALNE...
      Sygnały stałe:
          sig <= '1';
          data <= "11001";

      Sygnały powtarzalne:
          signal clk : std_logic :='0';
          ....
          process
          begin
            clk <= not clk after 25 ns;
          end process;

          constant CLK_PERIOD: time := 50 ns;
          clk <= not clk after CLK_PERIOD/2;

      Niesymetryczne sygnały powtarzalne:
          PULSE1:   process
          constant ZERO_TIME : time := 35 ns;
          begin
            pulse <= '1';
            wait for 10 ns;
            pulse <= '0';
            wait for ZERO_TIME;
          end process PULSE1;
      Niesymetryczne sygnały powtarzalne (cd.)
          PULSE1: process
          begin
          pulse <= '1';
          wait
          ^^^^^ze slajdu 338^^^^^

      Wzory danych odczytywane z tablic:
        library ieee;
        use ieee.std_logic_1164.all;
        use ieee.std_logic_arith.all;

        entity TB is
        end entity;

        architecture BEH of TB is
          type FREQ is array (1 to 6) of integer;
          constant FREQVAL : FREQ := (10230, 10231, 10232, 10233, 10234, 10235);
          ^^^^^slajd 345^^^^^^

      347-----------------------
        Instrukcja kontroli assert:
            assert PULSE = '0'
              report "Pulse has gone high"
              severity WARNING;

              *Typy ważności komunikatu mogą być FAILURE, ERROR, WARNING oraz NOTE.
              *Polecenie assert może występować zarówno w części współbieżnej jak i sekwencyjnej kodu VHDL.
              *Drukowanie wartości zmiennych:
                variable X :integer;
                .....
                assert (ERROR = FALSE)
                    report "Błąd symulacji, wartość X=" & integer'image(X);

Pakiet textio, biblioteka std
      use std.textio.all;
        *Pakiet textio - typy danych:
              -Typ line:
          type line is access string;
              -Typ text:
          type text is file of string;
              -Typ side:
          type side is (RIGHT,LEFT);
        *Pakiet textio - typy danych (cd.):
              -Podtyp width:
          subtype width is natural;
              -Standardowe zmienne plikowe:
          file input: text open READ_MORE is "std_input";
          file output: text open WRITE_MODE is "std_output"
        *Pakiet textio - procedury i funkcje:
          procedure readline(file F: text; L: out line);
          procedure writeline(file F: text; L: inout line);
  Pakiet textio -- przykład (cd.)
    library ieee;
    use ieee.std_logic_1164.all;
    use std.textio.all;
    entity TB is
    end entity;
    architecture BEH of TB is
      component ALI port (
                          MODE : in std_ulogic;
                          A, B : in std_ulogic_vector(31 downto 0);
                          SUM  : out std_ulogic_vector(31 downto 0);
                          CARRY : out std_ulogic
                          );
      end component;

UWAGI DOTYCZĄCE SYNTEZY:
    *Znajomość technologii
        -Pisząc kod VHDL, należy zawsze brać pod uwagę sposób implementacji tego kodu.
        -Nieznajomość hardware'u często sprawia, że projekt nie zostanie zsyntezowany
          lub jego jakość będzie słaba.
    *Używanie standardowych konwencji zapisu
        -Aby projekt był przenośny i syntezował się w sposób przewidywalny, należy stosować
        sprawdzone schematy przy wprowadzaniu projektu - dotyczy to np. struktury procesów
    *Testowanie stanu wysokiej impedancji:
        -W wielu przypadkach podczas symulacji zachodzi potrzeba sprawdzenia, czy sygnał
        osiąga stan wysokiej impedancji 'Z'. Osiąga się to np. poprzez instrukcje:
      if sig = 'Z' then -- sig jest typu std_logic
          ........
      end if;
        -W większości rzeczywistych układów nie istnieje układ sprawdzający, czy
        sygnał jest w stanie wysokiej impedancji, więc takie polecenie nie będzie
        zsyntezowane.

*Instrukcja if czy case?
      -Wyrażenia typu if-then-else są najczęściej syntezowane jako multipleksery
      z sygnałem sterującym zawartym w warunku instrukcji.
      -Jeżeli użyjemy zagnieżdżonych instrukcji if-then-else, nie prowadzi to do
      wykorzystania dużego multipleksera ze złożonym słowem sterującym.
      Zamiast tego użyty jest łańcuch małych multiplekserów mniej więcej oddający
      kolejność kodu VHDL.
      - Wyrażenie case również prowadzi do syntezy multipleksera, jednakże w tym przypadku
        może to być to jeden element, niezależnie od liczby rozgałęzień.
      - Z tego powodu, jeśli chcemy mieć jeden duży multiplekser (prawdopodobnie szybki),
        popwinniśmy użyć wyrażenia case.
      - Jeśli jednakże prędkość działania układu nie jest kluczowa, użycie
        zagnieżdżonych instrukcji if jest łatwiejsze do rozmieszczenia i trasowania
        (może dać mniejszą użytą powierzchnię)
  
  *Wybór implementacji:
      - kompromis pomiędzy powierzchnią a szybkością działania
      - wybór automatyczny ---ze środowisk producentów
      - wybór poprzez ograniczenia (constraints)
      - wybór poprzez dyrektywy w kodzie HDL

  *Przypisywanie wartości do wszystkich wyjść we wszystkich warunkach.
      -Stosownie do zasady - "Jeśli w procesie zegarowanym dla danego warunku
      nie specyfikuje się wartości sygnału oznacza to zapamiętanie jego 
      poprzedniego stanu, czyli w zsyntezowanym układzie wstawienei przerzutnika"
      można łatwo spowodować wstawienie niepotrzebnych przerzutników lub nawet
      doprowadzić do nieprawidłowej pracy układu.

WARTOŚCI POCZĄTKOWE NAJLEPIEJ STOSOWAĆ NA SYMULACJI

WARTOŚCI DON'T CARE STOSUJEMY TYLKO W SYMULACJI

